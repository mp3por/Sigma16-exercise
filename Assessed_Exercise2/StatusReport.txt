course: CA4
exercise: 2
date: 2015-11-06
surname: Kerkov
forename: Velin
email: 2022691K@student.gla.ac.uk

****************************************************************************************************************************************************************
********************************** loadxi **********************************************************************************************************************
****************************************************************************************************************************************************************

For Part 1 I had to do the following things in order to come up with the correct
result:

7 -> -- loadxi instruction
            loadxi R1,$12ab[R2] =>
                1. R1 := mem[12ab+R2]
                2. R2 := R2+1.

            st_loadxi0:                                         // ad = 12ab
              ad := mem[pc], pc++;
                assert [ctl_ma_pc, ctl_ad_ld, ctl_x_pc,
                        ctl_alu_abcd=1100, ctl_pc_ld]
            st_loadxi1: //                                      // ad = ad + R2
              ad := reg[ir_sa] + ad                             // R2 = reg[ir_sa]
                assert [set ctl_y_ad, ctl_alu_abcd=0000,
                        set ctl_ad_ld, ctl_ad_alu]
            st_loadxi2:                                        // R1 = mem[ad]
              reg[ir_d] := mem[ad]                             // R1 = reg[ir_d]
                assert [ctl_rf_ld]                             // ad = ad + R2
            st_loadxi3:
              reg[ir_sa] = reg[ir_sa] + 1
                asert [ctl_alu_abcd=1110, ctl_rf_alu, ctl_rf_ds, ctl_rf_ld]

1. Figure out what the 'loadxi' instruction has to do. From the description I
understood that the 'loadxi' instruction looks like so 'loadxi R5,x[R3]' and has
do the following things:

  1.1 load value of x[R3] into R5

  1.2 increment the [R3] value ( which holds the index of the array )
--------------------------------------------------------------------------------

2. Now I have to add the appropriate Control States. Those states must be first
defined in ControlSignals.hs, then added to the Control.hs and later the M1run.hs
must be modified to include output for them for easier debugging.

  2.1 The first function of the instruction is equivalent to the 'load'
  instruction, thus I create 3 states equivalent to the 3 states needed for 'load'

  2.2 Introduce a 4th state which will be responsible for incrementing the value
  in 'index' register.
--------------------------------------------------------------------------------

3. Now that I have all of the control states I need to define which control
signals are active during each state

  3.1 The first 3 states get added to the 'orw' of the same control signals as
  the equivalent 'load' states since they do the same thing

  3.2 Incrementing with 1 ( done with the ALU ) and save the result in the R3
--------------------------------------------------------------------------------

4. From 3.2 I see that for the 4th part of the 'loadxi' instruction I need to
save the output of the ALU, which will calculate [R3]+1, in R3, which is the
'ir_sa' field. Since my DP does not support this out of the box I do:

  4.1 Create a new control signal "ctl_rf_ds" which will determine if I use
  'ir_d' or 'ir_sa' as my destination address for the regfile. As with the new
  control states I have to create a new control signal in the ControlSignals.hs,
  append it in Control.hs and modify the M1run.hs to output its value for debugging.

  4.2 implement the 'if' using a 'mux'
    ir_dd = mux1w (ctl_rf_ds ctlsigs) ir_d ir_sa

  4.3 update all references from 'ir_d' to 'ir_dd' for consistency.
    (a,b) = regfile n k (ctl_rf_ld ctlsigs) ir_dd rf_sa rf_sb p1
    rf_sa = mux1w (ctl_rf_sd ctlsigs) ir_sa ir_dd
--------------------------------------------------------------------------------

5. Now that I have the logic in the DP I need to set the new "ctl_rf_ds" in the
control. Since I did all of this so that my last state "st_loadxi3" can save
the result of the ALU in the 'ir_sa' field of the command, I know that my new
control will be 1 only in this state.

  ctl_rf_ds   = orw [st_loadxi3] -- Added for new control signal
--------------------------------------------------------------------------------

6. Update the ArrayMax.hs program to use the new instruction.

  6.1 For this I replace "f531" on line 61 which states 'load R5,x[R3]' to "f537"
  which is translated to 'loadxi R5,x[R3]'.

  6.2 Now my load will also increment the index so I don't need the "0331" on
  line 71 which was doing the incrementing in the old version. I replace it with
  "0000" so that I keep the all the instruction addresses the same for easier
  comparison between the two versions.
--------------------------------------------------------------------------------

7. Run ArrayMax and examine if the end result is correct. The output from the
new version matches the output from the old version.

Output with 'loadxi' | Control output
---------------------|-----------------------
        m_out =0028  | m_out =0028
    Clock cycle 198  | Clock cycle 193

The difference in clock cycles needed to complete is expected since the 'loadxi'
program has one more state ('st_loadxi3') than the control version which is
executed 5 times. The "0000" instruction does nothing but still counts takes up
a whole cycle.

I have putted both outputs side by side for easier comparison.

Output with 'loadxi'                                                          Control output
........................................................................      ........................................................................
Clock cycle 198                                                               Clock cycle 193
Computer system inputs                                                        Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000                                           reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 1                                                                 ctl_start = 1

Control state                                                                 Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0           st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0                st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 1      st_lea0 = 0      st_lea1 = 0     st_load0 = 0               st_trap0 = 1      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0               st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0              st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0              st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0                                                                   st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

Control signals                                                               Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0            ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0            ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0            ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0            ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds   = 0

Datapath                                                                      Datapath
    ir = d000  pc = 0017  ad = 0018   a = 0000   b = 0000   r = 0000               ir = d000  pc = 0017  ad = 0018   a = 0000   b = 0000   r = 0000
     x = 0000   y = 0000   p = 0028  ma = 0018  md = 0000 cnd = 0                   x = 0000   y = 0000   p = 0028  ma = 0018  md = 0000 cnd = 0

Memory                                                                        Memory
   ctl_sto = 0      m_sto = 0                                                     ctl_sto = 0      m_sto = 0
     m_addr = 0018  m_real_addr = 0018  m_data = 0000  m_out =0028                   m_addr = 0018  m_real_addr = 0018  m_data = 0000  m_out =0028


************************************************************************      ************************************************************************
Trap instruction executed                                                     Trap instruction executed
Simulation of Sigma16_M1 circuit terminating                                  Simulation of Sigma16_M1 circuit terminating
************************************************************************      ************************************************************************

************************************************************************      ************************************************************************
Executed instruction:  trap  R0,0018[R0]   effective address = 0018           Executed instruction:  trap  R0,0018[R0]   effective address = 0018
Processor state:    pc = 0017  ir = d000  ad = 0018                           Processor state:    pc = 0017  ir = d000  ad = 0018
************************************************************************      ************************************************************************




Output extract:
Note: There is a printing problem in the last line. It registers the second
'load' but outputs the wrong destination.

........................................................................
Clock cycle 137
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 1       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds   = 0

Datapath
    ir = f537  pc = 000c  ad = 0014   a = 0004   b = 0000   r = 0004
     x = 0004   y = 0000   p = f402  ma = 0014  md = 0004 cnd = 1

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 0014  m_real_addr = 0014  m_data = 0004  m_out =f402


........................................................................
Clock cycle 138
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 1    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

Control signals
    ctl_alu_a   = 1  ctl_alu_b   = 1  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 1  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 1
    ctl_ad_ld   = 1  ctl_ad_alu  = 0  ctl_ma_pc   = 1  ctl_sto     = 0
    ctl_rf_ds   = 0

Datapath
    ir = f537  pc = 000c  ad = 0014   a = 0004   b = 0000   r = 000d
     x = 000c   y = 0000   p = 0019  ma = 000c  md = 0004 cnd = 1

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 000c  m_real_addr = 000c  m_data = 0004  m_out =0019


........................................................................
Clock cycle 139
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 1    st_loadxi2 = 0    st_loadxi3 = 0

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 1  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 1  ctl_ad_alu  = 1  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds   = 0

Datapath
    ir = f537  pc = 000d  ad = 0019   a = 0004   b = 0000   r = 001d
     x = 0004   y = 0019   p = 0012  ma = 0019  md = 0004 cnd = 1

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 0019  m_real_addr = 0019  m_data = 0004  m_out =0012


........................................................................
Clock cycle 140
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 1    st_loadxi3 = 0

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 1  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds   = 0

Datapath
    ir = f537  pc = 000d  ad = 001d   a = 0004   b = 0000   r = 0004
     x = 0004   y = 0000   p = 0028  ma = 001d  md = 0004 cnd = 1

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 001d  m_real_addr = 001d  m_data = 0004  m_out =0028

Register file update: R5 := 0028

........................................................................
Clock cycle 141
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 1

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 1

Control signals
    ctl_alu_a   = 1  ctl_alu_b   = 1  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 1  ctl_rf_pc   = 0
    ctl_rf_alu  = 1  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds   = 1

Datapath
    ir = f537  pc = 000d  ad = 001d   a = 0004   b = 0000   r = 0005
     x = 0004   y = 0000   p = 0005  ma = 001d  md = 0004 cnd = 1

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 001d  m_real_addr = 001d  m_data = 0004  m_out =0028

Register file update: R5 := 0005

************************************************************************
Executed instruction:  loadxi  R5,0008[R3]   effective address = 0008
R5 := 0028 was loaded in cycle 140
R5 := 0005 was loaded in cycle 141
Processor state:    pc = 000d  ir = f537  ad = 001d
************************************************************************



****************************************************************************************************************************************************************
********************************** mul *************************************************************************************************************************
****************************************************************************************************************************************************************


For Part 2 I used the same approach as in part 1.

2 -> -- mul instruction
        st_mul0:
          reg[ir_d] := reg[ir_sa] * reg[ir_sb]
            {ctl_mul_start, }
        st_mul1:
          wait until ready
        st_mul2:
          reg[ir_d] := prod
            {ctl_rf_mul_ld, , ctl_rf_ld, start}

1. I hooked the Multiply functional unit in the DP by:

  1.1 Adding it as a dependency
    import Multiply

  1.2 Hooking it up to the X and Y for inputs
    (ready,prod,rx,ry,multiply_s) = multiply n (ctl_mul_start ctlsigs) x y

2. I defined a new signal "ctl_mul_start" which will be used to tell the unit to
start the multiplication - defined it in ControlSignals.hs, added it to Control.hs
and updated M1run.hs to see it.

3. I figured out that I need 3 new control states st_mul0, st_mul1 and st_mul2
in order to handle the new 'mul' instruction

  3.1 st_mul0 -> this is the first state of a 'mul' instruction execution. It
  triggers the "ctl_mul_start" signal which tells the Multiply to start. 'ready'
  changes to 0.

  3.2 st_mul1 -> this is the "stall" state. When in this state the system does
  not do anything and just waits for the functional unit to complete its work.

  3.3 st_mul2 -> this is the final state. The system enters this state when the
  functional unit finishes ( when 'ready' becomes 1 again). In this state I need
  to catch the result and save it.

4. Since I need the 'ready' output signal from the Multiply, I updated the
definition of the datapath to export it as well as all the other Multiply output
signals just for easier debugging. I also updated the M1run.hs to print the new
DP outputs.
  datapath ctlsigs memdat = (ma,md,cond,a,b,ir,pc,ad,ovfl,r,x,y,p1,ready,prod,rx,ry,multiply_s)

5. I updated the 'control.hs' definition to capture allow another input signal

  control
  :: Clocked a
  => a -> [a] -> a -> a
  -> (CtlState a, a, CtlSig a)
  control reset ir cond ready = (ctlstate,start,ctlsigs)

6. I updated M1.hs so that the 'control' circuit receives the 'ready' signal
from the DP
  (ctl_state, ctl_start, ctlsigs) = control reset ir cond ready

7. Now that I have 'ready' in the 'control' I define the new states

  7.1 st_mul0   = dff (pRRR!!2) -> this was given. This stage must start the
  multiplication.

  7.2 st_mul1 -> the program must stay in this state until the functional unit
  is ready.

    7.2.1 The functional unit is ready when 'ready' transitions from 0 to 1
      ready1 = dff (ready)
      mul_ready = and2 (inv ready1) ready

    7.2.2 st_mul1 = 1 if (st_mul0 = 1) or if (st_mul1 = 1) {if (mul_ready)}. In
    other cases we are not in this state
      st_mul1   = dff (mux2 (st_mul1, st_mul0) zero st_mul0 (mux1 mul_ready st_mul1 zero) st_mul0)

  7.3 st_mul2 -> The system enters this stage when the functional unit is ready.
  This stage saves the result of the multiplication.

8. I set the all the control signals needed for each state based on step 7.

  8.1 st_mul0 -> ctl_mul_start

  8.2 st_mul1 -> nothing

  8.3 st_mul2 -> start, --> fetch new instruction on next cycle
                 ctl_rf_ld,  --> load into the registry file
                 ctl_rf_mul_ld --> use prod for 'p'

9. Create test programs to test execution. I have annotated the test programs so
that it is easier to understand what am I testing for.

Note:
The Multiply accepts two k-bit words and outputs a 2*k-bit result. In our case
this means that the result of the multiplication is 2 * registry-file-word-size
which means that we can not directly store the result. To overcome this problem
I trim the result and take only the 16 least significant bits and store them.
This means that multiplication will overflow when the result needs more than 16
bits to be represented in binary. There are tests to demonstrate this.


********************************************************************************
Load of 'mul' instruction
********************************************************************************
........................................................................
Clock cycle 21
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 1       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

      st_mul0 = 0    st_mul1 = 0    st_mul2 = 0

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds  = 0  ctl_mul_start  = 0
    ctl_rf_mul_ld  = 0

Datapath
    ir = 2321  pc = 0005  ad = 0004   a = 0004   b = 0002   r = 0006
     x = 0004   y = 0002   p = 2321  ma = 0004  md = 0004 cnd = 1

   ready = 1 prod = 00000000 rx = 0000 ry = 00000000 multiply_s = 00000000

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 0004  m_real_addr = 0004  m_data = 0004  m_out =2321

********************************************************************************
enter st_mul0 => ctl_mul_start = 1.
Start multiplication
********************************************************************************
........................................................................
Clock cycle 22
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 1     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

      st_mul0 = 1    st_mul1 = 0    st_mul2 = 0

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds  = 0  ctl_mul_start  = 1
    ctl_rf_mul_ld  = 0

Datapath
    ir = 2321  pc = 0005  ad = 0004   a = 0004   b = 0002   r = 0006
     x = 0004   y = 0002   p = 2321  ma = 0004  md = 0004 cnd = 1

   ready = 1 prod = 00000000 rx = 0000 ry = 00000000 multiply_s = 00000000

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 0004  m_real_addr = 0004  m_data = 0004  m_out =2321

********************************************************************************
st_mul1 => stall.
Nothing happening. Waiting for Multiply to finish
********************************************************************************
........................................................................
Clock cycle 23
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

      st_mul0 = 0    st_mul1 = 1    st_mul2 = 0

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds  = 0  ctl_mul_start  = 0
    ctl_rf_mul_ld  = 0

Datapath
    ir = 2321  pc = 0005  ad = 0004   a = 0004   b = 0002   r = 0006
     x = 0004   y = 0002   p = 2321  ma = 0004  md = 0004 cnd = 1

   ready = 0 prod = 00000000 rx = 0004 ry = 00000002 multiply_s = 00000002

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 0004  m_real_addr = 0004  m_data = 0004  m_out =2321

********************************************************************************
st_mul1 => stall.
Nothing happening. Waiting for Multiply to finish
********************************************************************************
........................................................................
Clock cycle 24
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

      st_mul0 = 0    st_mul1 = 1    st_mul2 = 0

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds  = 0  ctl_mul_start  = 0
    ctl_rf_mul_ld  = 0

Datapath
    ir = 2321  pc = 0005  ad = 0004   a = 0004   b = 0002   r = 0006
     x = 0004   y = 0002   p = 2321  ma = 0004  md = 0004 cnd = 1

   ready = 0 prod = 00000000 rx = 0002 ry = 00000004 multiply_s = 00000004

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 0004  m_real_addr = 0004  m_data = 0004  m_out =2321

********************************************************************************
st_mul1 => stall.
Nothing happening. Waiting for Multiply to finish
********************************************************************************
........................................................................
Clock cycle 25
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

      st_mul0 = 0    st_mul1 = 1    st_mul2 = 0

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds  = 0  ctl_mul_start  = 0
    ctl_rf_mul_ld  = 0

Datapath
    ir = 2321  pc = 0005  ad = 0004   a = 0004   b = 0002   r = 0006
     x = 0004   y = 0002   p = 2321  ma = 0004  md = 0004 cnd = 1

   ready = 0 prod = 00000000 rx = 0001 ry = 00000008 multiply_s = 00000008

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 0004  m_real_addr = 0004  m_data = 0004  m_out =2321

********************************************************************************
st_mul1 => stall.
Ready = 1 => Multiply ready
********************************************************************************
........................................................................
Clock cycle 26
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 0

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

      st_mul0 = 0    st_mul1 = 1    st_mul2 = 0

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 0  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds  = 0  ctl_mul_start  = 0
    ctl_rf_mul_ld  = 0

Datapath
    ir = 2321  pc = 0005  ad = 0004   a = 0004   b = 0002   r = 0006
     x = 0004   y = 0002   p = 2321  ma = 0004  md = 0004 cnd = 1

   ready = 1 prod = 00000008 rx = 0000 ry = 00000010 multiply_s = 00000018

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 0004  m_real_addr = 0004  m_data = 0004  m_out =2321

********************************************************************************
st_mul2 => Load Multiply result into ir_d => ctl_rf_ld,ctl_rf_mul_ld,
********************************************************************************
........................................................................
Clock cycle 27
Computer system inputs
         reset=0 dma=0 dma_a=0000 dma_d=0000
ctl_start = 1

Control state
   st_instr_fet = 0  st_dispatch = 0       st_add = 0       st_sub = 0
        st_mul0 = 0     st_cmplt = 0     st_cmpeq = 0     st_cmpgt = 0
       st_trap0 = 0      st_lea0 = 0      st_lea1 = 0     st_load0 = 0
       st_load1 = 0     st_load2 = 0    st_store0 = 0    st_store1 = 0
      st_store2 = 0     st_jump0 = 0     st_jump1 = 0    st_jumpf0 = 0
      st_jumpf1 = 0    st_jumpt0 = 0    st_jumpt1 = 0      st_jal0 = 0
        st_jal1 = 0
      st_loadxi0 = 0    st_loadxi1 = 0    st_loadxi2 = 0    st_loadxi3 = 0

      st_mul0 = 0    st_mul1 = 0    st_mul2 = 1

Control signals
    ctl_alu_a   = 0  ctl_alu_b   = 0  ctl_alu_c   = 0  ctl_alu_d   = 0
    ctl_x_pc    = 0  ctl_y_ad    = 0  ctl_rf_ld   = 1  ctl_rf_pc   = 0
    ctl_rf_alu  = 0  ctl_rf_sd   = 0  ctl_ir_ld   = 0  ctl_pc_ld   = 0
    ctl_ad_ld   = 0  ctl_ad_alu  = 0  ctl_ma_pc   = 0  ctl_sto     = 0
    ctl_rf_ds  = 0  ctl_mul_start  = 0
    ctl_rf_mul_ld  = 1

Datapath
    ir = 2321  pc = 0005  ad = 0004   a = 0004   b = 0002   r = 0006
     x = 0004   y = 0002   p = 0008  ma = 0004  md = 0004 cnd = 1

   ready = 1 prod = 00000008 rx = 0000 ry = 00000020 multiply_s = 00000028

Memory
   ctl_sto = 0      m_sto = 0
     m_addr = 0004  m_real_addr = 0004  m_data = 0004  m_out =2321

Register file update: R3 := 0008

************************************************************************
Executed instruction:  mul  R3,0004[R2]   effective address = 0004
R3 := 0008 was loaded in cycle 27
Processor state:    pc = 0005  ir = 2321  ad = 0004
************************************************************************